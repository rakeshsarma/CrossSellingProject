train_rows
train_data <- full_data[train_rows,]
test_data <- full_data[-train_rows,]
test_data
train_test_list <- as.list(train_data, test_data)
train_test_list[[1]]
train_test_list[[2]]
?liist
?list
train_split <-function(dataset, column_nbr){
print(dataset[,column_nbr])
train_rows<- createDataPartition(y = dataset[,column_nbr], times = 1, p=0.7, list=F)
train_data <- dataset[train_rows,]
test_data <- dataset[-train_rows,]
train_test_list <- as.list("train"=train_data, "test"= test_data)
}
train_test <- train_split(full_data,6 )
View(train_test)
train_data <- data.frame(train_test_list[[1]])
test_data <- data.frame(train_test_list[[2]])
nrow(train_data)
nrow(test_data)
train_data <- data.frame(train_test[[1]])
test_data <- data.frame(train_test[[2]])
nrow(test_data)
nrow(train_data)
train_split <-function(dataset, column_nbr){
print(dataset[,column_nbr])
train_rows<- createDataPartition(y = dataset[,column_nbr], times = 1, p=0.7, list=F)
train_data <- dataset[train_rows,]
test_data <- dataset[-train_rows,]
train_test_list <- as.list("train"=train_data, "test"= test_data)
}
train_test <- train_split(full_data,6 )
?as.list
train_split <-function(dataset, column_nbr){
print(dataset[,column_nbr])
train_rows<- createDataPartition(y = dataset[,column_nbr], times = 1, p=0.7, list=F)
train_data <- dataset[train_rows,]
test_data <- dataset[-train_rows,]
train_test_list <- list("train"=train_data, "test"= test_data)
}
train_test <- train_split(full_data,6 )
train_data <- data.frame(train_test[[1]])
test_data <- data.frame(train_test[[2]])
nrow(test_data)
nrow(train_data)
set.seed(123)
train_rows<- createDataPartition(y = dataset[,column_nbr], times = 1, p=0.7, list=F)
train_data <- dataset[train_rows,]
test_data <- dataset[-train_rows,]
train_test_list <- list("train"=train_data, "test"= test_data)
train_split <-function(dataset, column_nbr){
set.seed(123)
#print(dataset[,column_nbr])
train_rows<- createDataPartition(y = dataset[,column_nbr], times = 1, p=0.7, list=F)
train_data <- dataset[train_rows,]
test_data <- dataset[-train_rows,]
train_test_list <- list("train"=train_data, "test"= test_data)
}
train_split <-function(dataset, column_nbr){
set.seed(123)
#print(dataset[,column_nbr])
train_rows<- createDataPartition(y = dataset[,column_nbr], times = 1, p=0.7, list=F)
train_data <- dataset[train_rows,]
test_data <- dataset[-train_rows,]
train_test_list <- list("train"=train_data, "test"= test_data)
}
train_test <- train_split(full_data,6 )
train_data <- data.frame(train_test[[1]])
test_data <- data.frame(train_test[[2]])
nrow(test_data)
nrow(train_data)
?rpart
model <- rpart(train_data$Personal_Loan~., data = train_data)
summary(model)
str(train_data)
train_wo_target <- train_data[,-6]
predict_on_train <- predict(model, newdata = train_wo_target)
library(DMwR)
regr.eval(train_data$Personal_Loan, predict_on_train)
cross_val <- data.frame(train_data$Personal_Loan, predict_on_train)
table(cross_val)
predict_on_train
predict_on_train <- as.factor(predict_on_train)
cross_val <- data.frame(train_data$Personal_Loan, predict_on_train)
table(cross_val)
model <- rpart(train_data$Personal_Loan~., data = train_data, method = "class")
summary(model)
train_wo_target <- train_data[,-6]
predict_on_train <- predict(model, newdata = train_wo_target)
cross_val <- data.frame(train_data$Personal_Loan, predict_on_train)
table(cross_val)
cross_val <- data.frame(train_data$Personal_Loan, predict_on_train)
table(cross_val)
View(table(cross_val))
predict_on_train
plotcp(model)
?plotcp
printcp(model)
plot(model)
text(model)
plotcp(model)
printcp(model)
model2<-prune(model, cp = 0.01)
predict_on_train <- predict(model2, newdata = train_wo_target)
predict_on_train
predict_on_train <- predict(model2, newdata = train_wo_target, type = "class")
predict_on_train
cross_val <- data.frame(train_data$Personal_Loan, predict_on_train)
View(table(cross_val))
cross_val <- matrix(train_data$Personal_Loan, predict_on_train)
train_data$Personal_Loan
cross_val <- data.frame(train_data$Personal_Loan, predict_on_train)
View(table(cross_val))
accuracy_with_prune <-1-(103/3500)
accuracy_with_prune
predict_on_train_woprune <- predict(model1, newdata = train_wo_target, type = "class")
predict_on_train_woprune <- predict(model, newdata = train_wo_target, type = "class")
cross_val <- data.frame(train_data$Personal_Loan, predict_on_train_woprune)
cross_valWOprune <- data.frame(train_data$Personal_Loan, predict_on_train_woprune)
View(table(cross_val))
plot(model2)
text(model2)
plot(model2)
text(model2)
predict_on_test <- predict(model, newdata = test_data, type = "class")
cross_valTest <- data.frame(test_data$Personal_Loan, predict_on_test)
View(table(cross_valTest))
accuracy_on_test <-
accuracy_on_test <- 1-(50/1500)
accuracy_on_test
accuracy_with_prune
library(e1071)
library(e1071)
library(vegan)
library(dummies)
UnivBank <- read_csv("~/INSOFE/INSOFE_2/Machine Learning/Dec 18/20161218_Batch22_CSE7405c_DT_Lab_WithCode/20161218_Batch22_CSE7405c_DT_Lab/20161218_Batch22_CSE7405c_DT_Lab/UnivBank.csv")
library(reader)
library(readr)
UnivBank <- read_csv("~/INSOFE/INSOFE_2/Machine Learning/Dec 18/20161218_Batch22_CSE7405c_DT_Lab_WithCode/20161218_Batch22_CSE7405c_DT_Lab/20161218_Batch22_CSE7405c_DT_Lab/UnivBank.csv")
UnivBank <- read.csv("~/INSOFE/INSOFE_2/Machine Learning/Dec 18/20161218_Batch22_CSE7405c_DT_Lab_WithCode/20161218_Batch22_CSE7405c_DT_Lab/20161218_Batch22_CSE7405c_DT_Lab/UnivBank.csv")
View(UnivBank)
UnivBank=UnivBank[,-c(1,3,5,6) ]
summary(UnivBank)
str(UnivBank)
colnames(UnivBank)[6] <- "Personal_Loan"
colnames(UnivBank)[7] <- "Securities_Account"
colnames(UnivBank)[8]<- "CD_Account"
attr <- colnames(UnivBank)
cat_Attr<- c("Education", "Personal_Loan", "Securities_Account", "CD_Account", "Online", "CreditCard")
num_attr <-setdiff(attr, cat_Attr)
length(num_attr)+length(cat_Attr) == length(attr) # sanity check
str(UnivBank)
cat_data <- UnivBank[cat_Attr]
num_data <- UnivBank[num_attr]
apply(cat_data, 2, as.factor)
apply(num_data, 2, as.numeric)
head(num_data)
set.seed(123)
full_data <- data.frame(cbind(num_data, cat_data))
str(full_data)
str(cat_data)
education_dummy<- dummy(cat_data$Education)
Securities_Account_dummy<- dummy(cat_data$Securities_Account)
CD_Account_dummy<- dummy(cat_data$CD_Account)
online_dummy <- dummy(cat_data$Online)
Credicard_dummy <- dummy(cat_data$CreditCard)
education_dummy<- dummy(cat_data$Education)
Securities_Account_dummy<- dummy(cat_data$Securities_Account)
CD_Account_dummy<- dummy(cat_data$CD_Account)
online_dummy <- dummy(cat_data$Online)
Credicard_dummy <- dummy(cat_data$CreditCard)
new_cat_data<- data.frame(cbind(education_dummy,Securities_Account_dummy,CD_Account_dummy,online_dummy,Credicard_dummy))
new_cat_data
head(new_cat_data)
head(num_data)
num_data_standardization <- decostand(num_data, method = "range")
head(num_data_standardization)
all_data <- data.frame(num_data_standardization, new_cat_data)
all_data_wo_predictor <- data.frame(num_data_standardization, new_cat_data)
all_data <- data.frame(all_data_wo_predictor, cat_data$Personal_Loan)
?which
col-nbr <- which(colnames(all_data)=="Persoanl_Loan")
train_test <- train_split(all_data,col_nbr )
col_nbr <- which(colnames(all_data)=="Persoanl_Loan")
train_test <- train_split(all_data,col_nbr )
train_split <-function(dataset, column_nbr){
set.seed(123)
#print(dataset[,column_nbr])
train_rows<- createDataPartition(y = dataset[,column_nbr], times = 1, p=0.7, list=F)
train_data <- dataset[train_rows,]
test_data <- dataset[-train_rows,]
train_test_list <- list("train"=train_data, "test"= test_data)
}
col_nbr <- which(colnames(all_data)=="Persoanl_Loan")
train_test <- train_split(all_data,col_nbr )
library(caret)
train_split <-function(dataset, column_nbr){
set.seed(123)
#print(dataset[,column_nbr])
train_rows<- createDataPartition(y = dataset[,column_nbr], times = 1, p=0.7, list=F)
train_data <- dataset[train_rows,]
test_data <- dataset[-train_rows,]
train_test_list <- list("train"=train_data, "test"= test_data)
}
col_nbr <- which(colnames(all_data)=="Persoanl_Loan")
train_test <- train_split(all_data,col_nbr )
View(train_test)
col_nbr
str(all_data)
all_data <- data.frame(all_data_wo_predictor, Personal_Loan=cat_data$Personal_Loan)
train_split <-function(dataset, column_nbr){
set.seed(123)
#print(dataset[,column_nbr])
train_rows<- createDataPartition(y = dataset[,column_nbr], times = 1, p=0.7, list=F)
train_data <- dataset[train_rows,]
test_data <- dataset[-train_rows,]
train_test_list <- list("train"=train_data, "test"= test_data)
}
str(all_data)
col_nbr <- which(colnames(all_data)=="Persoanl_Loan")
col_nbr
which(colnames(all_data)=="Personal_Loan")
col_nbr <- which(colnames(all_data)=="Persoanl_Loan")
col_nbr
col_nbr <- as.numeric(which(colnames(all_data)=="Persoanl_Loan"))
col_nbr
which(colnames(all_data)=="Persoanl_Loan")
col_nbr <- as.numeric(which(colnames(all_data)=="Persoanl_Loan"))
col_nbr
as.numeric(which(colnames(all_data)=="Persoanl_Loan"))
which(colnames(all_data)=="Persoanl_Loan")
which(colnames(all_data)=="Persoanl_Loan")
train_test <- train_split(all_data,16 )
View(train_test)
train_data <- data.frame(train_test[[1]])
test_data <- data.frame(train_test[[2]])
nrow(test_data)
nrow(train_data)
match("Persoanl_Loan",names(all_data))
match("Persoanl_Loan",colnames(all_data))
colnames(all_data)
match("Persoanl_Loan",colnames(all_data))
library(e1071)
library(vegan)
library(dummies)
library(caret)
# importing dataset
library(readr)
UnivBank <- read.csv("~/INSOFE/INSOFE_2/Machine Learning/Dec 18/20161218_Batch22_CSE7405c_DT_Lab_WithCode/20161218_Batch22_CSE7405c_DT_Lab/20161218_Batch22_CSE7405c_DT_Lab/UnivBank.csv")
View(UnivBank)
UnivBank=UnivBank[,-c(1,3,5,6) ]
summary(UnivBank)
str(UnivBank)
#renaming columns
colnames(UnivBank)[6] <- "Personal_Loan"
colnames(UnivBank)[7] <- "Securities_Account"
colnames(UnivBank)[8]<- "CD_Account"
attr <- colnames(UnivBank)
cat_Attr<- c("Education", "Personal_Loan", "Securities_Account", "CD_Account", "Online", "CreditCard")
num_attr <-setdiff(attr, cat_Attr)
length(num_attr)+length(cat_Attr) == length(attr) # sanity check
str(UnivBank)
#converting to categorical data
cat_data <- UnivBank[cat_Attr]
num_data <- UnivBank[num_attr]
#conversion into factors
apply(cat_data, 2, as.factor)
#conversion into numerica variables
apply(num_data, 2, as.numeric)
head(num_data)
set.seed(123)
full_data <- data.frame(cbind(num_data, cat_data))
str(full_data)
#converting into dummy data
str(cat_data)
education_dummy<- dummy(cat_data$Education)
Securities_Account_dummy<- dummy(cat_data$Securities_Account)
CD_Account_dummy<- dummy(cat_data$CD_Account)
online_dummy <- dummy(cat_data$Online)
Credicard_dummy <- dummy(cat_data$CreditCard)
new_cat_data<- data.frame(cbind(education_dummy,Securities_Account_dummy,CD_Account_dummy,online_dummy,Credicard_dummy))
head(new_cat_data)
head(num_data)
#standardization of num data
num_data_standardization <- decostand(num_data, method = "range")
all_data_wo_predictor <- data.frame(num_data_standardization, new_cat_data)
all_data <- data.frame(all_data_wo_predictor, Personal_Loan=cat_data$Personal_Loan)
# splitting train & test
train_split <-function(dataset, column_nbr){
set.seed(123)
#print(dataset[,column_nbr])
train_rows<- createDataPartition(y = dataset[,column_nbr], times = 1, p=0.7, list=F)
train_data <- dataset[train_rows,]
test_data <- dataset[-train_rows,]
train_test_list <- list("train"=train_data, "test"= test_data)
}
str(all_data)
match("Persoanl_Loan",colnames(all_data))
col_nbr <- as.numeric(which(colnames(all_data)=="Persoanl_Loan"))
train_test <- train_split(all_data,16 )
View(train_test)
train_data <- data.frame(train_test[[1]])
test_data <- data.frame(train_test[[2]])
nrow(test_data)
nrow(train_data)
(colnames(test_data)
)
required_cols <- setdiff(colnames(test_data),"Personal_Loan")
?svm
model <- svm(x=train_data[required_cols], y=train_data$Personal_Loan, kernel = "linear", type = "C-classification", cost = 10, gamma = 0.1 )
summary(model)
pred_on_train <- predict(object = model, newdata = train_data[, -"Personal_Loan"])
pred_on_train <- predict(object = model, newdata = train_data[-"Personal_Loan"])
pred_on_train <- predict(object = model, newdata = train_data[required_cols])
library(DMwR)
cm_matrix<-table(pred_on_train, train_data$Personal_Loan)
cm_matrix
tuneResult <- tune(svm, train_data[, required_cols], train_data$Personal.Loan,
ranges = list(gamma= 10^(-6:1), cost= 2^(2:3)))
tuneResult <- tune(svm, train_data[ required_cols], train_data$Personal.Loan,
ranges = list(gamma= 10^(-6:1), cost= 2^(2:3)))
tuneResult <- tune(svm, train_data[ required_cols], train_data$Personal.Loan,
ranges = list(gamma= 10^(-6:1), cost= 2^(2:3)))
class(train_data$Personal_Loan)
tuneResult <- tune(svm, train_data[ required_cols], train_data$Personal.Loan,
ranges = list(gamma= 10^(-6:1), cost= 2^(2:3)))
train_data$Personal.Loan <- as.factor(train_data$Personal.Loan)
train_data$Personal.Loan <- as.factor(as.facor(train_data$Personal.Loan))
train_data$Personal.Loan <- as.factor(as.character(train_data$Personal.Loan))
train_data$Personal.Loan
class(train_data$Personal_Loan)
train_data$Personal_Loan
train_data$Personal.Loan
train_data$Personal_Loan
train_data$Personal_Loan <- as.factor(as.character(train_data$Personal_Loan))
tuneResult <- tune(svm, train_data[ required_cols], train_data$Personal_Loan,
ranges = list(gamma= 10^(-6:1), cost= 2^(2:3)))
tuneResult$best.model
tuned_model <-tuneResult$best.model
?cart
??cart
install.packages("cart")
install.packages("rpart")
?ada
install.packages("ada")
?ada
library(ada)
?ada
UCI_Credit_Card <- read.csv("~/Desktop/GNQ4 practice/Datasets/UCI_Credit_Card.csv")
read.csv(file.choose())
read.csv(file.choose())
read.csv(file.choose())
UCI_Credit_Card <-read.csv(file.choose())
View(UCI_Credit_Card)
View(head(UCI_Credit_Card, 10))
str(UCI_Credit_Card)
?str
View(UCI_Credit_Card)
UCI_Credit_Card <- read.csv("~/Desktop/GNQ4 practice/Datasets/UCI_Credit_Card.csv")
View(UCI_Credit_Card)
str(UCI_Credit_Card)
dim(UCI_Credit_Card)
install.packages(“dplyr”)
install.packages(“dplyr”)
install.packages(“dplyr”)
install.packages(“dplyr”)
UCI_Credit_Card <- read.csv("~/Desktop/GNQ4 practice/Datasets/UCI_Credit_Card.csv")
View(UCI_Credit_Card)
View(UCI_Credit_Card)
str(UCI_Credit_Card)
dim(UCI_Credit_Card)
library(dplyr)
UCI_CC_Cleaned<- select(UCI_Credit_Card, -ID) #removing ID column
cat_attr <- c("SEX", "EDUCATION", "MARRIAGE", "PAY_0","PAY_2","PAY_3","PAY_4","PAY_5","PAY_6","default.payment.next.month") # defining categorical variables
num_attr <- setdiff(colnames(UCI_CC_Cleaned), cat_attr) # defining numerical variables
length(cat_attr)+length(num_attr)==length(colnames(UCI_CC_Cleaned))
num_data <- UCI_CC_Cleaned[num_attr]
cat_data <- UCI_CC_Cleaned[cat_attr]
cat_data = data.frame(sapply(cat_data,as.character))
num_data = data.frame(sapply(num_data,as.character))
cat_data = data.frame(sapply(cat_data, as.factor))
num_data = data.frame(sapply(num_data, as.numeric))
library(rakes)
dim(data) # notice that there are 30,000 rows and 24 columns as we have removed ID feature
cat_data = data.frame(sapply(cat_data,as.character))
num_data = data.frame(sapply(num_data,as.character))
cat_data = data.frame(sapply(cat_data, as.factor))
num_data = data.frame(sapply(num_data, as.numeric))
data <- cbind(cat_data, num_data)
str(data)
dim(data) # notice that there are 30,000 rows and 24 columns as we have removed ID feature
boxplot(LIMIT_BAL~default.payment.next.month, data = UCI_Credit_Card, col="green")
defaulters <- subset(UCI_Credit_Card, default.payment.next.month==1)
non_defaulters <- subset(UCI_Credit_Card, default.payment.next.month==0)
View(defaulters)
defaulters <- subset(data, default.payment.next.month==1)
non_defaulters <- subset(data, default.payment.next.month==0)
View(defaulters)
mean_age_defaulters <- mean(defaulters$AGE)
mean_age_non_defaulters <- mean(non_defaulters$AGE)
mean_age_defaulters
mean_age_non_defaulters
boxplot(AGE~default.payment.next.month, data = data, col="wheat4")
boxplot(LIMIT_BAL~EDUCATION, data = UCI_Credit_Card, col="wheat3")
rm(list=ls(all=T))
setwd("D:/Backup/INSOFE/Class/CPEE/Batch-22/CSE 7306c/Lab")
getwd()
plot.ts(AirPassengers)
decompose(AirPassengers)
plot(decompose(AirPassengers))
plot.ts(decompose(AirPassengers))
plot(decompose(AirPassengers))
decompose(AirPassengers)
plot(AirPassengers)
plot(decompose(AirPassengers))
decomposed <- decompose(AirPassengers)
decomposed$seasonal
plot(decomposed$seasonal)
plot(decomposed$trend)
plot(decomposed$trend, y = "trend")
plot(decomposed$trend, ylab = "trend")
plot(decomposed$trend, ylab = "Trend")
plot(decomposed$random, ylab = "trend")
plot(decomposed$random, ylab = "Random Component")
decomposed$seasonal
decomposed$seasonal
?AirPassengers
AirPassengers
decomposed$trend
decomposed$trend
decomposed$random
decomposed$random
decomposed$random
decomposed$random
decomposed$random
library(readxl)
Target_Marketing_and_cross_selling_Data <- read_excel("~/INSOFE/Project/Data /Data WIP/Target_Marketing_and_cross_selling__Data/Target Marketing and cross selling - Data.xls")
View(Target_Marketing_and_cross_selling_Data)
data <- read_excel("~/INSOFE/Project/Data /Data WIP/Target_Marketing_and_cross_selling__Data/Target Marketing and cross selling - Data.xls")
rm(Target_Marketing_and_cross_selling_Data)
View(data)
summary(data)
str(data)
rm(data)
marketing_data <- read_excel("~/INSOFE/Project/Data /Data WIP/Target_Marketing_and_cross_selling__Data/Target Marketing and cross selling - Data.xls")
rm(data)
summary(marketing_data)
str(marketing_data)
unique(marketing_data$`Customer ID`)
names(marketing_data)
names(marketing_data)[1]
paste(names(marketing_data)[1], collapse = " ")
a<-paste(names(marketing_data)[1], collapse = " ")
a
a<-paste(names(marketing_data)[1], collapse = " ", sep = " ")
a
install.packages("stringr")
?paste0
b<- gsub(" ", "_", a)
b
names(marketing_data) <- gsub(" ", "_", names(marketing_data))
names(marketing_data)
?gsub
str(marketing_data)
dim(marketing_data)
rm(list = ls(all.names = T))
setwd("~/Data Science/CrossSellingProject")
marketing_data <- read_excel(file.choose())
library(readxl)
marketing_data<- read_excel("~/Data Science/CrossSellingProject/Target Marketing and cross selling - Data.xls")
View(marketing_data)
marketing_data<- read_excel("~/Data Science/CrossSellingProject/Target Marketing and cross selling - Data.xls")
marketing_data<- read_excel("~/Data Science/CrossSellingProject/Target Marketing and cross selling - Data.xls")
View(marketing_data)
summary(marketing_data)
str(marketing_data)
summary(marketing_data)
str(marketing_data)
unique(marketing_data$`Customer ID`)
names(marketing_data) <- gsub(" ", "_", names(marketing_data))
names(marketing_data)
str(marketing_data)
dim(marketing_data) # There are 5284 rows and 31 columns
names(marketing_data)
str(marketing_data)
boxplot(marketing_data$Ticket_Revenue)
hist(marketing_data$Ticket_Revenue)
max(marketing_data$Ticket_Revenue)
library(dplyr)
select(marketing_data$Ticket_Revenue, Ticket_Revenue<2000 )
?select
??dplyr
filter(marketing_data$Ticket_Revenue, Ticket_Revenue<2000 )
filter(marketing_data, Ticket_Revenue<2000 )
hist(filter(marketing_data, Ticket_Revenue<2000 ))
b<-  playing with data
b<-filter(marketing_data, Ticket_Revenue<2000 )
hist(b$Ticket_Revenue)
hist(b$Ticket_Revenue, breaks = c(100, 1200))
hist(b$Ticket_Revenue, breaks = c(100, 1000))
?hist
hist(b$Ticket_Revenue, breaks = 10)
hist(b$Ticket_Revenue, breaks = 20)
hist(b$Ticket_Revenue, breaks = 30)
hist(marketing_data$Ticket_Revenue, breaks = 30)
hist(marketing_data$Ticket_Revenue, breaks = 1)
hist(marketing_data$Ticket_Revenue, breaks = 3000)
hist(marketing_data$Ticket_Revenue, breaks = 5000)
hist(marketing_data$Ticket_Revenue, breaks = 6000)
mean(marketing_data$Ticket_Revenue)
