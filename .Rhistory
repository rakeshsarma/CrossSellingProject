plot(decomposed$trend)
plot(decomposed$trend, y = "trend")
plot(decomposed$trend, ylab = "trend")
plot(decomposed$trend, ylab = "Trend")
plot(decomposed$random, ylab = "trend")
plot(decomposed$random, ylab = "Random Component")
decomposed$seasonal
decomposed$seasonal
?AirPassengers
AirPassengers
decomposed$trend
decomposed$trend
decomposed$random
decomposed$random
decomposed$random
decomposed$random
decomposed$random
packs<-("mclust"
,"tm"
,"magrittr"
,"SnowballC"
,"e1071"
,"XML"
,"wordcloud"
,"proxy")
packs<-c("mclust"
,"tm"
,"magrittr"
,"SnowballC"
,"e1071"
,"XML"
,"wordcloud"
,"proxy")
packsp[1]
packs[1]
for(len in length(packs)){
install.packages(packs[len], dependencies = T)
}
decompose(AirPassengers)
?AirPassengers
mean(AirPassengers)
class(AirPassengers)
library(caret)
select(AirPassengers, year =1959)
subset(AirPassengers, year =1959)
?subset
subset(AirPassengers, year =1959)
subset(AirPassengers, year ==1959)
install.packages("rJava")
marketing_data<- read_excel("~/Data Science/CrossSellingProject/Target Marketing and cross selling - Data.xls")
library(readxl)
marketing_data<- read_excel("~/Data Science/CrossSellingProject/Target Marketing and cross selling - Data.xls")
NAs<-data.frame(apply(marketing_data, 2,function(x){sum(is.na(x))}))
NAs
uniqueNos <- data.frame(apply(marketing_data, 2,function(x){length(unique(x))}))
table(uniqueNos)
View(uniqueNos)
sum()
sum(marketing_data$`Schedule Date`==marketing_data$`Dispatch Date)
;
sum(marketing_data$`Schedule Date`==marketing_data$`Dispatch Date`)
names(marketing_data) <- gsub(" ", "_", names(marketing_data))
sum(marketing_data$Schedule_Date==marketing_data$Dispatch_Date)
which(marketing_data$Schedule_Date==marketing_data$Dispatch_Date)
which(marketing_data$Schedule_Date!=marketing_data$Dispatch_Date)
sum(marketing_data$Schedule_Date!=marketing_data$Dispatch_Date)
View(select.list())
filter(marketing_data, customer_ID="C000637")
library(caret)
filter(marketing_data, customer_ID="C000637")
select(marketing_data, customer_ID="C000637")
?filter
library(dplyr)
filter(marketing_data, customer_ID="C000637")
?filter
filter(marketing_data, customer_ID=="C000637")
filter(marketing_data, Customer_ID=="C000637")
cust<-filter(marketing_data, Customer_ID=="C000637")
View(cust)
cust<-filter(marketing_data, Customer_ID=="C000164")
View(cust)
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
if (! ("methods"  %in% rownames(installed.packages()))) { install.packages("methods") }
if (! ("statmod"  %in% rownames(installed.packages()))) { install.packages("statmod") }
if (! ("stats"    %in% rownames(installed.packages()))) { install.packages("stats") }
if (! ("graphics" %in% rownames(installed.packages()))) { install.packages("graphics") }
if (! ("RCurl"    %in% rownames(installed.packages()))) { install.packages("RCurl") }
if (! ("jsonlite" %in% rownames(installed.packages()))) { install.packages("jsonlite") }
if (! ("tools"    %in% rownames(installed.packages()))) { install.packages("tools") }
if (! ("utils"    %in% rownames(installed.packages()))) { install.packages("utils") }
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos=(c("var url = location.href; var url2 = url.substring(0, url.lastIndexOf("/")); document.write(url2);http://h2o-release.s3.amazonaws.com/h2o/rel-tverberg/4/R")))
install.packages("h2o", type="source", repos=(c("var url = location.href; var url2 = url.substring(0, url.lastIndexOf("/")); document.write(url2);http://h2o-release.s3.amazonaws.com/h2o/rel-tverberg/4/R")))
rm(list=ls(all=TRUE))
library(h2o)
install.packages("drat")
install.packages("mxnet")
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
if (! ("methods"  %in% rownames(installed.packages()))) { install.packages("methods") }
if (! ("statmod"  %in% rownames(installed.packages()))) { install.packages("statmod") }
if (! ("stats"    %in% rownames(installed.packages()))) { install.packages("stats") }
if (! ("graphics" %in% rownames(installed.packages()))) { install.packages("graphics") }
if (! ("RCurl"    %in% rownames(installed.packages()))) { install.packages("RCurl") }
if (! ("jsonlite" %in% rownames(installed.packages()))) { install.packages("jsonlite") }
if (! ("tools"    %in% rownames(installed.packages()))) { install.packages("tools") }
if (! ("utils"    %in% rownames(installed.packages()))) { install.packages("utils") }
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos=(c("var url = location.href; var url2 = url.substring(0, url.lastIndexOf("/")); document.write(url2);http://h2o-release.s3.amazonaws.com/h2o/rel-tverberg/4/R")))
install.packages("h2o", type="source", repos=(c("var url = location.href; var url2 = url.substring(0, url.lastIndexOf("/")); document.write(url2);http://h2o-release.s3.amazonaws.com/h2o/rel-tverberg/4/R")))
install.packages("drat")
drat::addRepo("dmlc")
install.packages("mxnet")
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos=(c("var url = location.href; var url2 = url.substring(0, url.lastIndexOf("/")); document.write(url2);http://h2o-release.s3.amazonaws.com/h2o/rel-tverberg/4/R")))
install.packages("drat")
library(h2o)
install.packages("h2o", type="source", repos=(c("var url = location.href; var url2 = url.substring(0, url.lastIndexOf("/")); document.write(url2);http://h2o-release.s3.amazonaws.com/h2o/rel-tverberg/4/R")))
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Next, we download packages that H2O depends on.
if (! ("methods" %in% rownames(installed.packages()))) { install.packages("methods") }
if (! ("statmod" %in% rownames(installed.packages()))) { install.packages("statmod") }
if (! ("stats" %in% rownames(installed.packages()))) { install.packages("stats") }
if (! ("graphics" %in% rownames(installed.packages()))) { install.packages("graphics") }
if (! ("RCurl" %in% rownames(installed.packages()))) { install.packages("RCurl") }
if (! ("jsonlite" %in% rownames(installed.packages()))) { install.packages("jsonlite") }
if (! ("tools" %in% rownames(installed.packages()))) { install.packages("tools") }
if (! ("utils" %in% rownames(installed.packages()))) { install.packages("utils") }
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-tverberg/4/R")))
library(h2o)
localH2O = h2o.init(nthreads=-1)
demo(h2o.kmeans)
rm(list=ls(all=TRUE))
library(h2o)
h2o.init()
h2o.clusterInfo()
irisPath = system.file("extdata", "iris.csv", package="h2o")
iris.hex = h2o.importFile(path = irisPath, destination_frame = "iris.hex")
h2o.ls()
h2o.rm(iris.hex)
h2o.ls()
rm(irisPath)
h2o.clusterInfo()
irisPath = system.file("extdata", "iris.csv", package="h2o")
iris.hex = h2o.importFile(path = irisPath, destination_frame = "iris.hex")
h2o.ls()
h2o.rm(iris.hex)
h2o.ls()
rm(irisPath)
irisPath = system.file("extdata", "iris.csv", package= "h2o")
iris.hex = h2o.uploadFile(path = irisPath, destination_frame = "iris.hex")
h2o.ls()
h2o.rm(iris.hex)
rm(irisPath)
irisPath = system.file("extdata", "iris_wheader.csv", package="h2o")
iris.hex = h2o.importFile(path = irisPath)
h2o.anyFactor(iris.hex)
h2o.ls()
h2o.removeAll()
rm(iris.hex, irisPath)
prosPath <- system.file("extdata", "prostate.csv", package="h2o")
prostate.hex <- h2o.importFile(path = prosPath)
is.factor(prostate.hex[,4])
prostate.hex[,4] <- as.factor(prostate.hex[,4])
is.factor(prostate.hex[,4])
summary(prostate.hex[,4])
h2o.ls()
h2o.removeAll()
rm(prostate.hex, prosPath)
prosPath <- system.file("extdata", "prostate.csv", package="h2o")
prostate.hex = h2o.importFile(path = prosPath,
destination_frame="prostate.hex")
prostate.R <- as.data.frame(prostate.hex)
summary(prostate.R)
h2o.ls()
h2o.rm(prostate.hex)
rm(prostate.R, prostate.hex, prosPath)
data(iris)
iris
iris.hex = as.h2o(iris, destination_frame= "iris.hex")
head(iris.hex)
head(iris)
rm(iris)
colnames(iris.hex)
names(iris.hex)
h2o.ls()
h2o.rm(iris.hex)
h2o.ls()
rm(list=ls(all=TRUE))
setwd("D:/Backup/INSOFE/Class/CPEE/Batch-22/CSE 7219c/Day2/Lab")
setwd("~/Desktop/Altaf/Labs/20170218_Batch22_CSE7219c_Lab02_H2o_GLM_DL")
setwd("~/Desktop/Altaf/Labs/20170218_Batch22_CSE7219c_Lab02_H2o_GLM_DL")
univ=read.table('UnivBank.csv', header=T, sep=',',
col.names=c('ID','age','exp','inc','zip','family',
'ccavg','edu','mortgage','loan',
'securities','cd','online','cc'))
univ=univ[,-c(1,3,5)]
univ$family=as.factor(univ$family)
univ$edu=as.factor(univ$edu)
univ$securities=as.factor(univ$securities)
univ$cd=as.factor(univ$cd)
univ$online=as.factor(univ$online)
univ$cc=as.factor(univ$cc)
univ$loan=as.factor(univ$loan)
rows=seq(1,nrow(univ),1)
set.seed(123)
trainRows = sample(rows, nrow(univ)*.8)
set.seed(123)
testRows=rows[-(trainRows)]
train = univ[trainRows,]
test = univ[testRows,]
rm(univ, rows, testRows, trainRows)
library(h2o)
h2o.init(nthreads = -1, max_mem_size = "1g")
train.hex <- as.h2o(x = train, destination_frame = "train.hex")
model_LS = h2o.glm(y = "loan",
x = setdiff(names(train.hex), "loan"),
training_frame = train.hex,
family = "binomial",
lambda_search = TRUE)
print(model_LS)
lambda_opts = list(list(1), list(.5), list(.1), list(.01),
list(.001), list(.0001), list(.00001), list(0))
alpha_opts = list(list(0), list(.25), list(.5), list(.75), list(1))
hyper_parameters = list(lambda = lambda_opts, alpha = alpha_opts)
grid_GLM <- h2o.grid("glm",
hyper_params = hyper_parameters,
grid_id = "grid_GLM.hex",
y = "loan",
x = setdiff(names(train.hex), "loan"),
training_frame = train.hex,
family = "binomial")
rm(lambda_opts, alpha_opts, hyper_parameters)
summary(grid_GLM)
grid_GLM_models <- lapply(grid_GLM@model_ids,
function(model_id) { h2o.getModel(model_id) })
for (i in 1:length(grid_GLM_models))
{
print(sprintf("regularization: %-50s auc: %f", grid_GLM_models[[i]]@model$model_summary$regularization, h2o.auc(grid_GLM_models[[i]])))
}
find_Best_Model <- function(grid_models){
best_model = grid_models[[1]]
best_model_AUC = h2o.auc(best_model)
for (i in 2:length(grid_models))
{
temp_model = grid_models[[i]]
temp_model_AUC = h2o.auc(temp_model)
if(best_model_AUC < temp_model_AUC)
{
best_model = temp_model
best_model_AUC = temp_model_AUC
}
}
return(best_model)
}
best_GLM_model = find_Best_Model(grid_GLM_models)
rm(grid_GLM_models)
best_GLM_model_AUC = h2o.auc(best_GLM_model)
best_GLM_model
best_GLM_model@parameters
h2o.varimp(best_GLM_model)
test.hex <- as.h2o(x = test, destination_frame = "test.hex")
predict.hex = h2o.predict(best_GLM_model,
newdata = test.hex[,setdiff(names(test.hex), "loan")])
data_GLM = h2o.cbind(test.hex[,"loan"], predict.hex)
pred_GLM = as.data.frame(data_GLM)
h2o.shutdown(F)
conf_Matrix_GLM = table(pred_GLM$loan, pred_GLM$predict)
Accuracy = (conf_Matrix_GLM[1,1]+conf_Matrix_GLM[2,2])/sum(conf_Matrix_GLM)
rm(list=ls())
h2o.init()
h2o.clusterInfo()
rm(list = ls(all.names = T))
setwd("~/Data Science/CrossSellingProject")
library(readxl)
library(dplyr)
library(XLConnect)
library(caret)
marketing_data<- read_excel("~/Data Science/CrossSellingProject/Target Marketing and cross selling - Data.xls")
names(marketing_data) <- gsub(" ", "_", names(marketing_data))
names(marketing_data)
summary(marketing_data$Customer_Type)
unique(marketing_data$Customer_Type)
marketing_data_1 <- marketing_data[order(marketing_data$Customer_ID),]
View(marketing_data_1)
verify <-marketing_data %>% group_by(Customer_Type) %>% count(Customer_Type)
attach(marketing_data_1)
class(verify)
sum(verify$n)
summary(marketing_data$Customer_Type)
summary(marketing_data$Setup_Date)
marketing_data_2 <- select(marketing_data_1, -c(Customer_Name:Contact, Ticket_Number,Current_Email, Week_Ending_Date, Call_Time, Schedule_Time, Dispatch_Time, Complete_Time))
marketing_data_2 <- marketing_data_2[order(marketing_data_2$Customer_ID,marketing_data_2$Call_Date),]
View(marketing_data_2)
sum(marketing_data_2$Schedule_Date!=marketing_data_2$Dispatch_Date)
min(marketing_data_2$Setup_Date)
marketing_data_2$epoch_date <- as.Date("2008-09-30")
marketing_data_2$days_from_epoch <- as.Date(marketing_data_2$Call_Date)-epoch_date
days_bw_calls <- diff(marketing_data_2$Call_Date[1:length(marketing_data_2$Call_Date)-1],marketing_data_2$Call_Date[2:length(marketing_data_2$Call_Date)], units = "days")
days_bw_calls <- diff(marketing_data_2$days_from_epoch)
length(days_bw_calls)
marketing_data_3<-marketing_data_2 %>% arrange(Customer_ID, Call_Date) %>% group_by(Customer_ID) %>% mutate(diff =  as.Date(Call_Date)- lag(as.Date(Call_Date)))
View(marketing_data_3)
mean(marketing_data_3$diff, na.rm=T)
mean(marketing_data_3$diff[marketing_data_3$Customer_Type="CustType01"], na.rm=T)
mean(marketing_data_3$diff[marketing_data_3$Customer_Type=="CustType01"], na.rm=T)
mean(marketing_data_3$diff[marketing_data_3$Customer_Type=="CustType01"], na.rm=T)
mean(marketing_data_3$diff[marketing_data_3$Customer_Type=="CustType02"], na.rm=T)
mean(marketing_data_3$diff[marketing_data_3$Customer_Type=="CustType03"], na.rm=T)
?mean
rm(list = ls(all.names = T))
setwd("~/Data Science/CrossSellingProject")
library(readxl)
library(dplyr)
library(XLConnect)
library(caret)
marketing_data<- read_excel("~/Data Science/CrossSellingProject/Target Marketing and cross selling - Data.xls")
names(marketing_data) <- gsub(" ", "_", names(marketing_data))
names(marketing_data)
marketing_data_1 <- marketing_data[order(marketing_data$Customer_ID,marketing_data$Call_Date),]
View(marketing_data_2)
View(marketing_data_1)
marketing_data_2 <- select(marketing_data_1, -c(Customer_Name:Contact, Ticket_Number,Current_Email, Week_Ending_Date, Call_Time, Schedule_Time, Dispatch_Time, Complete_Time))
View(marketing_data_2)
marketing_data_3<-marketing_data_2 %>% arrange(Customer_ID, Call_Date) %>% group_by(Customer_ID) %>% mutate(diff =  as.Date(Call_Date)- lag(as.Date(Call_Date)))
View(marketing_data_3)
View(marketing_data_3)
marketing_data_4<- marketing_data_3 %>%
group_by(Customer_ID) %>%
slice(c(1, n())) %>%
ungroup()
nrow(marketing_data_4)
nrow(marketing_data_4) + 1058*2
marketing_data_4<- marketing_data_3 %>% arrange(Customer_ID, Call_Date) %>%
group_by(Customer_ID) %>%
slice(c(1, n())) %>%
ungroup()
nrow(marketing_data_4)
View(marketing_data_4)
View(marketing_data_3)
marketing_data_4<- marketing_data_3 %>% arrange(Customer_ID, Call_Date) %>%
slice(c(1, n())) %>%
ungroup()
nrow(marketing_data_4)
View(marketing_data_4)
View(marketing_data_3)
marketing_data_4<- marketing_data_3 %>% arrange(Customer_ID, Call_Date) %>%
slice(c(2, n()-1)) %>%
ungroup()
nrow(marketing_data_4)
View(marketing_data_4)
marketing_data_4<- marketing_data_3 %>% arrange(Customer_ID, Call_Date) %>%
slice(c(2: n()-1)) %>%
ungroup()
nrow(marketing_data_4)
View(marketing_data_4)
marketing_data_4<- marketing_data_3 %>% arrange(Customer_ID, Call_Date) %>%
slice(c(2: n()-1)) %>%
ungroup()
nrow(marketing_data_4)
View(marketing_data_4)
?slice
marketing_data_4<- marketing_data_3 %>% arrange(Customer_ID, Call_Date) %>%
slice(c(1: n()-1)) %>%
ungroup()
nrow(marketing_data_4)
marketing_data_4<- marketing_data_3 %>% arrange(Customer_ID, Call_Date) %>%
slice(c(3: n()-1)) %>%
ungroup()
nrow(marketing_data_4)
View(marketing_data_4)
slice(mtcars, 1L)
slice(mtcars, 1)
slice(mtcars, n())
slice(mtcars, 5:n())
slice(mtcars, 1:n())
slice(mtcars, 1:n()-1)
mtcars_demo <- mtcars[1:10,]
slice(mtcars_demo, 1:5)
mtcars_demo
a<-mtcars_demo %>% group_by(cyl) %>% slice (1:n())
a
a<-mtcars_demo %>% group_by(cyl) %>% slice (1)
a
a<-mtcars_demo %>% group_by(cyl) %>% slice (2:n()-1)
a
nrow(marketing_data_4)
nrow(marketing_data_4)
nrow(marketing_data_4) +(2*1058)
nrow(marketing_data_3)
marketing_data_4<- marketing_data_3 %>% arrange(Customer_ID, Call_Date) %>%
slice(c(2: n()-1)) %>%
ungroup()
nrow(marketing_data_4)
write.csv(marketing_data_3)
?write.csv
write.csv(marketing_data_3, "marketing_data_3.csv")
write.csv(marketing_data_4, "marketing_data_4.csv")
marketing_data_4<- marketing_data_3 %>% arrange(Customer_ID, Call_Date) %>%
slice(c(3: n()-1)) %>%
ungroup()
nrow(marketing_data_4)
nrow(marketing_data_3)
nrow(marketing_data_3)-nrow(marketing_data_4)
(nrow(marketing_data_3)-nrow(marketing_data_4))/2
cust_type_call_duration <- marketing_data_4 %>% group_by(Customer_Type) %>% (mean_call_duration = mean(diff))
cust_type_call_duration
mean(marketing_data_4$diff)
sum(is.na(marketing_data_4$diff))
marketing_data_4[(is.na(marketing_data_4$diff))]
marketing_data_4[(is.na(marketing_data_4$diff)),]
marketing_data_4[which(Customer_ID=='C000197' | Customer_ID=='C000438')]
marketing_data_4[which(Customer_ID=='C000197' | Customer_ID=='C000438'),]
marketing_data_4[which(Customer_ID=='C000197'),]
View(marketing_data_4[which(Customer_ID=='C000197'),])
marketing_data_4[(is.na(marketing_data_4$diff)),]
marketing_data_4[which((is.na(marketing_data_4$diff))),]
View(marketing_data_4[which((is.na(marketing_data_4$diff))),])
marketing_data_4[-which((is.na(marketing_data_4$diff))),]
marketing_data_4<-
View(marketing_data_4[-which((is.na(marketing_data_4$diff))),])
marketing_data_4<-
nrow(marketing_data_4[-which((is.na(marketing_data_4$diff))),])
marketing_data_4<-
length(marketing_data_4[-which((is.na(marketing_data_4$diff))),])
(marketing_data_4[-which((is.na(marketing_data_4$diff))),])
marketing_data_4<-
View((marketing_data_4[-which((is.na(marketing_data_4$diff))),])
(nrow(marketing_data_3)-nrow(marketing_data_4))/2
# Find mean call duration  for each customer type
cust_type_call_duration <- marketing_data_4 %>% group_by(Customer_Type) %>% (mean_call_duration = mean(diff))
View
marketing_data_4<-
View(marketing_data_4[-which((is.na(marketing_data_4$diff))),])
marketing_data_4<-
View(marketing_data_4[-which((is.na(marketing_data_4$diff))),])
marketing_data_4<-
View(marketing_data_4[which((is.na(marketing_data_4$diff))),])
View(marketing_data_4[which(Customer_ID=='C000197'),])
marketing_data_4<- marketing_data_3 %>% arrange(Customer_ID, Call_Date) %>%
slice(c(3: n()-1)) %>%
ungroup()
nrow(marketing_data_4)
View(marketing_data_4[which(Customer_ID=='C000197'),])
marketing_data_4<-
View(marketing_data_4[which((is.na(marketing_data_4$diff))),])
marketing_data_4<-
View(marketing_data_4[which((!is.na(marketing_data_4$diff))),])
?is,na
?is.na
(xx <- c(0:4))
is.na(xx) <- c(2, 4)
xx
is.na(xx)
(xx <- c(0:4))
is.na(xx) <- c(2, 4)
is.na(xx)
(xx <- c(0:4))
is.na(xx) <- c(2, 4)
(xx <- c(0:4))
is.na(xx)
is.na(c(1, NA))
!is.na(c(1, NA))
marketing_data_4<-
View(marketing_data_4[which((!is.na(marketing_data_4$diff))),])
is.na(marketing_data_4$diff)
marketing_data_4$diff
marketing_data_4<- marketing_data_3 %>% arrange(Customer_ID, Call_Date) %>%
slice(c(3: n()-1)) %>%
ungroup()
nrow(marketing_data_4)
View(marketing_data_4[which(Customer_ID=='C000197'),])
marketing_data_4<-
View(marketing_data_4[which((is.na(marketing_data_4$diff))),])
View(marketing_data_4[which((!is.na(marketing_data_4$diff))),])
View(marketing_data_4[which((is.na(marketing_data_4$diff))),])
marketing_data_4<- marketing_data_3 %>% arrange(Customer_ID, Call_Date) %>%
slice(c(3: n()-1)) %>%
ungroup()
nrow(marketing_data_4)
View(marketing_data_4)
View(marketing_data_4[which((is.na(marketing_data_4$diff))),])
is.na(marketing_data_4$diff)
!is.na(marketing_data_4$diff)
which((!is.na(marketing_data_4$diff)))
View(marketing_data_4[which((!is.na(marketing_data_4$diff))),])
marketing_data_5<-marketing_data_4[which((!is.na(marketing_data_4$diff))),]
(nrow(marketing_data_5)-nrow(marketing_data_4))/2
(nrow(marketing_data_5)-nrow(marketing_data_3))/2
cust_type_call_duration <- marketing_data_5 %>% group_by(Customer_Type) %>% (mean_call_duration = mean(diff))
View(marketing_data_4[which(Customer_ID=='C000197'),])
View(marketing_data_5[which(Customer_ID=='C000197'),])
marketing_data_5
marketing_data_4[which((!is.na(marketing_data_4$diff))),]
marketing_data_5<-View(marketing_data_4[which((!is.na(marketing_data_4$diff))),])
marketing_data_5<-View(marketing_data_4[which((!is.na(marketing_data_4$diff))),])
marketing_data_5<-marketing_data_4[which((!is.na(marketing_data_4$diff))),]
cust_type_call_duration <- marketing_data_5 %>% group_by(Customer_Type) %>% (mean_call_duration = mean(diff))
mean(marketing_data_5$diff)
marketing_data_5 %>% group_by(Customer_Type)
cust_type_call_duration <- marketing_data_5 %>% group_by(Customer_Type) %>% summarise(mean_call_duration = mean(diff))
cust_type_call_duration
